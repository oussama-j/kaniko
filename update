#!/bin/sh

# Full path to the real Docker CLI
DOCKER_CLI="/usr/bin/docker"

# Full path to the Kaniko executor
KANIKO_EXECUTOR="/kaniko/executor"

# Full path to Crane
CRANE_CLI="/usr/local/bin/crane"

# Temporary tarball for Kaniko image tar
IMAGE_TARBALL="/kaniko/image.tar"

# Ensure required tools exist
if [ ! -x "$KANIKO_EXECUTOR" ]; then
  echo "Kaniko executor not found at $KANIKO_EXECUTOR. Please check the path."
  exit 1
fi

if [ ! -x "$CRANE_CLI" ]; then
  echo "Required tools not found. Please check the path."
  exit 1
fi

# Handle Docker-like commands
case "$1" in
  build)
    # Parse `docker build` arguments
    shift
    BUILD_ARGS=""
    while [ "$#" -gt 0 ]; do
      case "$1" in
        -t|--tag)
          IMAGE_TAG="$2"
          shift 2
          ;;
        -f|--file)
          DOCKERFILE_PATH="$2"
          shift 2
          ;;
        --build-arg)
          BUILD_ARGS="$BUILD_ARGS --build-arg=$2"
          shift 2
          ;;
        --)
          shift
          break
          ;;
        *)
          CONTEXT="$1"
          shift
          ;;
      esac
    done

    # Set defaults if not provided
    DOCKERFILE_PATH="${DOCKERFILE_PATH:-Dockerfile}"
    CONTEXT="${CONTEXT:-.}"
    IMAGE_TAG="${IMAGE_TAG:-kaniko:latest}"

    # Kaniko build command (no cache, extract image to a tarball)
    echo "Building image..."
    $KANIKO_EXECUTOR \
      --context "$CONTEXT" \
      --dockerfile "$DOCKERFILE_PATH" \
      --destination "$IMAGE_TAG" \
      --tarPath "$IMAGE_TARBALL" \
      $BUILD_ARGS

    if [ "$?" -eq 0 ]; then
      echo "Image built successfully."
    else
      echo "Build failed."
      exit 1
    fi
    ;;
  
  push)
    # Parse `docker push` arguments
    shift
    IMAGE_TAG="$1"

    if [ -z "$IMAGE_TAG" ]; then
      echo "Error: Image tag is required for push."
      exit 1
    fi

    # Use Crane to push the tarball
    echo "Pushing image..."
    $CRANE_CLI push "$IMAGE_TARBALL" "$IMAGE_TAG"

    if [ "$?" -eq 0 ]; then
      echo "Image pushed successfully."
    else
      echo "Push failed."
      exit 1
    fi
    ;;
  
  pull)
    # Parse `docker pull` arguments
    shift
    IMAGE_TAG="$1"

    if [ -z "$IMAGE_TAG" ]; then
      echo "Error: Image tag is required for pull."
      exit 1
    fi

    # Use Crane to pull the image
    echo "Pulling image..."
    $CRANE_CLI pull "$IMAGE_TAG" "$IMAGE_TARBALL"

    if [ "$?" -eq 0 ]; then
      echo "Image pulled successfully."
    else
      echo "Pull failed."
      exit 1
    fi
    ;;
  
  tag)
    # Parse `docker tag` arguments
    shift
    SOURCE_IMAGE="$1"
    TARGET_IMAGE="$2"

    if [ -z "$SOURCE_IMAGE" ] || [ -z "$TARGET_IMAGE" ]; then
      echo "Error: Source and target image names are required for tag."
      exit 1
    fi

    echo "Tagging image..."
    $CRANE_CLI tag "$SOURCE_IMAGE" "$TARGET_IMAGE"

    if [ "$?" -eq 0 ]; then
      echo "Image tagged successfully."
    else
      echo "Tagging failed."
      exit 1
    fi
    ;;
  
  rmi)
    # Parse `docker rmi` arguments
    shift
    IMAGE_TAG="$1"

    if [ -z "$IMAGE_TAG" ]; then
      echo "Error: Image tag is required for removal."
      exit 1
    fi

    echo "Removing image..."
    if [ -f "$IMAGE_TARBALL" ]; then
      # Remove local tarball if exists
      rm -f "$IMAGE_TARBALL"
      echo "Local image tarball removed."
    else
      # Use Crane to delete the image from the registry
      $CRANE_CLI delete "$IMAGE_TAG"
      if [ "$?" -eq 0 ]; then
        echo "Image removed successfully."
      else
        echo "Image removal failed."
        exit 1
      fi
    fi
    ;;
  
  *)
    # Pass other commands to the real Docker CLI
    $DOCKER_CLI "$@"
    ;;
esac
